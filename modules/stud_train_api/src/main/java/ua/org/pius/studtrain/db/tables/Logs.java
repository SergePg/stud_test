/**
 * This class is generated by jOOQ
 */
package ua.org.pius.studtrain.db.tables;

import ua.org.pius.studtrain.db.Keys;
import ua.org.pius.studtrain.db.Public;
import ua.org.pius.studtrain.db.tables.records.LogsRecord;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.5" },
                            comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logs extends org.jooq.impl.TableImpl<LogsRecord> {

	private static final long serialVersionUID = 616018617;

	/**
	 * The singleton instance of <code>public.logs</code>
	 */
	public static final Logs LOGS = new Logs();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<LogsRecord> getRecordType() {
		return LogsRecord.class;
	}

	/**
	 * The column <code>public.logs.username</code>.
	 */
	public final org.jooq.TableField<LogsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * The column <code>public.logs.domain</code>.
	 */
	public final org.jooq.TableField<LogsRecord, String> DOMAIN = createField("domain", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * The column <code>public.logs.created_at</code>.
	 */
	public final org.jooq.TableField<LogsRecord, java.sql.Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>public.logs.description</code>.
	 */
	public final org.jooq.TableField<LogsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(4096), this, "");

	/**
	 * Create a <code>public.logs</code> table reference
	 */
	public Logs() {
		this("logs", null);
	}

	/**
	 * Create an aliased <code>public.logs</code> table reference
	 */
	public Logs(String alias) {
		this(alias, Logs.LOGS);
	}

	private Logs(String alias, org.jooq.Table<LogsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Logs(String alias, org.jooq.Table<LogsRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<LogsRecord> getPrimaryKey() {
		return Keys.PK_LOGS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<LogsRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<LogsRecord>>asList(Keys.PK_LOGS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<LogsRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<LogsRecord, ?>>asList(Keys.LOGS__FK_LOGS_USERS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Logs as(String alias) {
		return new Logs(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Logs rename(String name) {
		return new Logs(name, null);
	}
}
